{"ast":null,"code":"var _jsxFileName = \"/Users/joshuamacleod/Desktop/projects/jira/client/src/TotalStoryPointBarChart.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import { BarChart } from '@mui/x-charts/BarChart';\n\n// function TotalStoryPointBarChart() {\n//   const [chartData, setChartData] = useState(null);\n\n//   useEffect(() => {\n//     // Fetch data from the API\n//     fetch('http://localhost:4000/api/available-sp')\n//       .then(response => response.json())\n//       .then(data => {\n//         // Set the fetched data to the state\n//         setChartData(data);\n//       })\n//       .catch(error => {\n//         console.error('Error fetching data:', error);\n//       });\n//   }, []);\n\n//   return (\n//     <div>\n//       {chartData ? (\n//         <BarChart\n//           xAxis={[{ scaleType: 'band', data: chartData.xAxisData }]}\n//           series={[{ data: chartData.seriesData }]}\n//           width={500}\n//           height={300}\n//         />\n//       ) : (\n//         <p>Loading...</p>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default TotalStoryPointBarChart;\n\nimport React, { useState, useEffect } from 'react';\nimport { BarChart } from '@mui/x-charts/BarChart';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TotalStoryPointBarChart() {\n  _s();\n  const [data, setData] = useState([]);\n  useEffect(() => {\n    fetchData();\n  }, []);\n  const fetchData = async () => {\n    try {\n      const response = await fetch('http://localhost:4000/api/available-sp');\n      const jsonData = await response.json();\n      setData(jsonData); // Assuming your data is an array of objects\n    } catch (error) {\n      console.error('Error fetching data:', error);\n    }\n  };\n\n  // Example data structure: [{ group: 'group A', value: 4 }, { group: 'group B', value: 3 }, { group: 'group C', value: 5 }]\n  const xAxisData = data.map(item => item.group);\n  const seriesData = data.map(item => item.value);\n  return /*#__PURE__*/_jsxDEV(BarChart, {\n    xAxis: [{\n      scaleType: 'band',\n      data: xAxisData\n    }],\n    series: [{\n      data: seriesData\n    }],\n    width: 500,\n    height: 300\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n}\n_s(TotalStoryPointBarChart, \"IEMTtLVFIuToo7X/raQbJAxzNQU=\");\n_c = TotalStoryPointBarChart;\nexport default TotalStoryPointBarChart;\nvar _c;\n$RefreshReg$(_c, \"TotalStoryPointBarChart\");","map":{"version":3,"names":["React","useState","useEffect","BarChart","jsxDEV","_jsxDEV","TotalStoryPointBarChart","_s","data","setData","fetchData","response","fetch","jsonData","json","error","console","xAxisData","map","item","group","seriesData","value","xAxis","scaleType","series","width","height","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/joshuamacleod/Desktop/projects/jira/client/src/TotalStoryPointBarChart.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import { BarChart } from '@mui/x-charts/BarChart';\n\n// function TotalStoryPointBarChart() {\n//   const [chartData, setChartData] = useState(null);\n\n//   useEffect(() => {\n//     // Fetch data from the API\n//     fetch('http://localhost:4000/api/available-sp')\n//       .then(response => response.json())\n//       .then(data => {\n//         // Set the fetched data to the state\n//         setChartData(data);\n//       })\n//       .catch(error => {\n//         console.error('Error fetching data:', error);\n//       });\n//   }, []);\n\n//   return (\n//     <div>\n//       {chartData ? (\n//         <BarChart\n//           xAxis={[{ scaleType: 'band', data: chartData.xAxisData }]}\n//           series={[{ data: chartData.seriesData }]}\n//           width={500}\n//           height={300}\n//         />\n//       ) : (\n//         <p>Loading...</p>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default TotalStoryPointBarChart;\n\nimport React, { useState, useEffect } from 'react';\nimport { BarChart } from '@mui/x-charts/BarChart';\n\nfunction TotalStoryPointBarChart() {\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  const fetchData = async () => {\n    try {\n      const response = await fetch('http://localhost:4000/api/available-sp');\n      const jsonData = await response.json();\n      setData(jsonData); // Assuming your data is an array of objects\n    } catch (error) {\n      console.error('Error fetching data:', error);\n    }\n  };\n\n  // Example data structure: [{ group: 'group A', value: 4 }, { group: 'group B', value: 3 }, { group: 'group C', value: 5 }]\n  const xAxisData = data.map(item => item.group);\n  const seriesData = data.map(item => item.value);\n\n  return (\n    <BarChart\n      xAxis={[{ scaleType: 'band', data: xAxisData }]}\n      series={[{ data: seriesData }]}\n      width={500}\n      height={300}\n    />\n  );\n}\n\nexport default TotalStoryPointBarChart;\n"],"mappings":";;AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,QAAQ,QAAQ,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElD,SAASC,uBAAuBA,CAAA,EAAG;EAAAC,EAAA;EACjC,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAEpCC,SAAS,CAAC,MAAM;IACdQ,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMA,SAAS,GAAG,MAAAA,CAAA,KAAY;IAC5B,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,wCAAwC,CAAC;MACtE,MAAMC,QAAQ,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;MACtCL,OAAO,CAACI,QAAQ,CAAC,CAAC,CAAC;IACrB,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC9C;EACF,CAAC;;EAED;EACA,MAAME,SAAS,GAAGT,IAAI,CAACU,GAAG,CAACC,IAAI,IAAIA,IAAI,CAACC,KAAK,CAAC;EAC9C,MAAMC,UAAU,GAAGb,IAAI,CAACU,GAAG,CAACC,IAAI,IAAIA,IAAI,CAACG,KAAK,CAAC;EAE/C,oBACEjB,OAAA,CAACF,QAAQ;IACPoB,KAAK,EAAE,CAAC;MAAEC,SAAS,EAAE,MAAM;MAAEhB,IAAI,EAAES;IAAU,CAAC,CAAE;IAChDQ,MAAM,EAAE,CAAC;MAAEjB,IAAI,EAAEa;IAAW,CAAC,CAAE;IAC/BK,KAAK,EAAE,GAAI;IACXC,MAAM,EAAE;EAAI;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACb,CAAC;AAEN;AAACxB,EAAA,CA7BQD,uBAAuB;AAAA0B,EAAA,GAAvB1B,uBAAuB;AA+BhC,eAAeA,uBAAuB;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}