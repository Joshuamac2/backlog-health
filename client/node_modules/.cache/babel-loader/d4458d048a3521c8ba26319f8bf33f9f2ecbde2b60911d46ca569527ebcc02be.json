{"ast":null,"code":"var _jsxFileName = \"/Users/joshuamacleod/Desktop/projects/jira/client/src/TotalStoryPointBarChart.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TotalStoryPointBarChart() {\n  _s();\n  const [available, setAvailable] = useState(null);\n  const [awaiting, setAwaiting] = useState(null);\n  const [blocked, setBlocked] = useState(null);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchAvailable = async () => {\n      try {\n        const response = await fetch(`http://localhost:4000/api/available`);\n        if (!response.ok) {\n          throw new Error('Network response for available data was not ok');\n        }\n        const data = await response.json();\n        setAvailable(data);\n      } catch (error) {\n        console.error('Error fetching available data:', error);\n        setError(error);\n      }\n    };\n    const fetchAwaiting = async () => {\n      try {\n        const response = await fetch(`http://localhost:4000/api/awaiting`);\n        if (!response.ok) {\n          throw new Error('Network response for awaiting data was not ok');\n        }\n        const data = await response.json();\n        setAwaiting(data);\n      } catch (error) {\n        console.error('Error fetching awaiting data:', error);\n        setError(error);\n      }\n    };\n    const fetchBlocked = async () => {\n      try {\n        const response = await fetch(`http://localhost:4000/api/blocked`);\n        if (!response.ok) {\n          throw new Error('Network response for blocked data was not ok');\n        }\n        const data = await response.json();\n        setBlocked(data);\n      } catch (error) {\n        console.error('Error fetching blocked data:', error);\n        setError(error);\n      }\n    };\n    fetchAvailable();\n    fetchAwaiting();\n    fetchBlocked();\n  }, []); // Empty dependency array to run once after the initial render\n\n  console.log('available:', available);\n  console.log('awaiting:', awaiting);\n  console.log('blocked:', blocked);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: error && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Error: \", error.message]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n}\n_s(TotalStoryPointBarChart, \"SbcEY7IXOkzYJoP64PucC6AXDr0=\");\n_c = TotalStoryPointBarChart;\nexport default TotalStoryPointBarChart;\nvar _c;\n$RefreshReg$(_c, \"TotalStoryPointBarChart\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","TotalStoryPointBarChart","_s","available","setAvailable","awaiting","setAwaiting","blocked","setBlocked","error","setError","fetchAvailable","response","fetch","ok","Error","data","json","console","fetchAwaiting","fetchBlocked","log","children","message","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/joshuamacleod/Desktop/projects/jira/client/src/TotalStoryPointBarChart.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nfunction TotalStoryPointBarChart() {\n  const [available, setAvailable] = useState(null);\n  const [awaiting, setAwaiting] = useState(null);\n  const [blocked, setBlocked] = useState(null);\n  const [error, setError] = useState(null); \n\n  useEffect(() => {\n    const fetchAvailable = async () => {\n      try {\n        const response = await fetch(`http://localhost:4000/api/available`);\n        if (!response.ok) {\n          throw new Error('Network response for available data was not ok');\n        }\n        const data = await response.json();\n        setAvailable(data); \n      } catch (error) {\n        console.error('Error fetching available data:', error);\n        setError(error);\n      }\n    };\n\n    const fetchAwaiting = async () => {\n      try {\n        const response = await fetch(`http://localhost:4000/api/awaiting`);\n        if (!response.ok) {\n          throw new Error('Network response for awaiting data was not ok');\n        }\n        const data = await response.json();\n        setAwaiting(data); \n      } catch (error) {\n        console.error('Error fetching awaiting data:', error);\n        setError(error);\n      }\n    };\n\n    const fetchBlocked = async () => {\n      try {\n        const response = await fetch(`http://localhost:4000/api/blocked`);\n        if (!response.ok) {\n          throw new Error('Network response for blocked data was not ok');\n        }\n        const data = await response.json();\n        setBlocked(data); \n      } catch (error) {\n        console.error('Error fetching blocked data:', error);\n        setError(error);\n      }\n    };\n\n    fetchAvailable();\n    fetchAwaiting();\n    fetchBlocked();\n  }, []); // Empty dependency array to run once after the initial render\n\n  console.log('available:', available)\n  console.log('awaiting:', awaiting)\n  console.log('blocked:', blocked)\n\n  return (\n    <div>\n      {error && <div>Error: {error.message}</div>}\n    </div>\n  );\n}\n\nexport default TotalStoryPointBarChart;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}