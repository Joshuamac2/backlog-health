{"ast":null,"code":"var _jsxFileName = \"/Users/joshuamacleod/Desktop/projects/jira/client/src/TotalStoryPointBarChart.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { BarChart } from '@mui/x-charts/BarChart';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TotalStoryPointBarChart() {\n  _s();\n  const [chartData, setChartData] = useState(null);\n  useEffect(() => {\n    fetch('http://localhost:4000/api/available-sp').then(response => {\n      if (!response.ok) {\n        throw new Error('Failed to fetch data');\n      }\n      return response.json(); // Parse JSON data\n    }).then(data => {\n      // Extract necessary data from the response and format it for the chart\n      const xAxisData = data.issues.map(issue => issue.key); // Assuming 'key' is used for xAxis\n      const seriesData = data.issues.map(issue => {\n        // Assuming 'fields' contains story points information\n        return issue.fields.storyPoints; // Replace 'storyPoints' with the actual field name\n      });\n\n      // Set the formatted data to the state\n      setChartData({\n        xAxisData,\n        seriesData\n      });\n    }).catch(error => {\n      console.error('Error fetching data:', error);\n    });\n  }, []);\n  console.log(chartData);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: chartData ? /*#__PURE__*/_jsxDEV(BarChart, {\n      xAxis: [{\n        scaleType: 'band',\n        data: chartData.xAxisData\n      }],\n      series: [{\n        data: chartData.seriesData\n      }],\n      width: 500,\n      height: 300\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n}\n_s(TotalStoryPointBarChart, \"9euvDhZ+n6eLTlbzwvHmNPhoqAw=\");\n_c = TotalStoryPointBarChart;\nexport default TotalStoryPointBarChart;\nvar _c;\n$RefreshReg$(_c, \"TotalStoryPointBarChart\");","map":{"version":3,"names":["React","useState","useEffect","BarChart","jsxDEV","_jsxDEV","TotalStoryPointBarChart","_s","chartData","setChartData","fetch","then","response","ok","Error","json","data","xAxisData","issues","map","issue","key","seriesData","fields","storyPoints","catch","error","console","log","children","xAxis","scaleType","series","width","height","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/joshuamacleod/Desktop/projects/jira/client/src/TotalStoryPointBarChart.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { BarChart } from '@mui/x-charts/BarChart';\n\nfunction TotalStoryPointBarChart() {\n  const [chartData, setChartData] = useState(null);\n\n  useEffect(() => {\n    fetch('http://localhost:4000/api/available-sp')\n      .then(response => {\n        if (!response.ok) {\n          throw new Error('Failed to fetch data');\n        }\n        return response.json(); // Parse JSON data\n      })\n      .then(data => {\n        // Extract necessary data from the response and format it for the chart\n        const xAxisData = data.issues.map(issue => issue.key); // Assuming 'key' is used for xAxis\n        const seriesData = data.issues.map(issue => {\n          // Assuming 'fields' contains story points information\n          return issue.fields.storyPoints; // Replace 'storyPoints' with the actual field name\n        });\n\n        // Set the formatted data to the state\n        setChartData({ xAxisData, seriesData });\n      })\n      .catch(error => {\n        console.error('Error fetching data:', error);\n      });\n  }, []);\n\n  console.log(chartData);\n\n  return (\n    <div>\n      {chartData ? (\n        <BarChart\n          xAxis={[{ scaleType: 'band', data: chartData.xAxisData }]}\n          series={[{ data: chartData.seriesData }]}\n          width={500}\n          height={300}\n        />\n      ) : (\n        <p>Loading...</p>\n      )}\n    </div>\n  );\n}\n\nexport default TotalStoryPointBarChart;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,QAAQ,QAAQ,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElD,SAASC,uBAAuBA,CAAA,EAAG;EAAAC,EAAA;EACjC,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAEhDC,SAAS,CAAC,MAAM;IACdQ,KAAK,CAAC,wCAAwC,CAAC,CAC5CC,IAAI,CAACC,QAAQ,IAAI;MAChB,IAAI,CAACA,QAAQ,CAACC,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,sBAAsB,CAAC;MACzC;MACA,OAAOF,QAAQ,CAACG,IAAI,CAAC,CAAC,CAAC,CAAC;IAC1B,CAAC,CAAC,CACDJ,IAAI,CAACK,IAAI,IAAI;MACZ;MACA,MAAMC,SAAS,GAAGD,IAAI,CAACE,MAAM,CAACC,GAAG,CAACC,KAAK,IAAIA,KAAK,CAACC,GAAG,CAAC,CAAC,CAAC;MACvD,MAAMC,UAAU,GAAGN,IAAI,CAACE,MAAM,CAACC,GAAG,CAACC,KAAK,IAAI;QAC1C;QACA,OAAOA,KAAK,CAACG,MAAM,CAACC,WAAW,CAAC,CAAC;MACnC,CAAC,CAAC;;MAEF;MACAf,YAAY,CAAC;QAAEQ,SAAS;QAAEK;MAAW,CAAC,CAAC;IACzC,CAAC,CAAC,CACDG,KAAK,CAACC,KAAK,IAAI;MACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC9C,CAAC,CAAC;EACN,CAAC,EAAE,EAAE,CAAC;EAENC,OAAO,CAACC,GAAG,CAACpB,SAAS,CAAC;EAEtB,oBACEH,OAAA;IAAAwB,QAAA,EACGrB,SAAS,gBACRH,OAAA,CAACF,QAAQ;MACP2B,KAAK,EAAE,CAAC;QAAEC,SAAS,EAAE,MAAM;QAAEf,IAAI,EAAER,SAAS,CAACS;MAAU,CAAC,CAAE;MAC1De,MAAM,EAAE,CAAC;QAAEhB,IAAI,EAAER,SAAS,CAACc;MAAW,CAAC,CAAE;MACzCW,KAAK,EAAE,GAAI;MACXC,MAAM,EAAE;IAAI;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACb,CAAC,gBAEFjC,OAAA;MAAAwB,QAAA,EAAG;IAAU;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG;EACjB;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;AAAC/B,EAAA,CA3CQD,uBAAuB;AAAAiC,EAAA,GAAvBjC,uBAAuB;AA6ChC,eAAeA,uBAAuB;AAAC,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}