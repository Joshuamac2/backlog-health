{"ast":null,"code":"var _jsxFileName = \"/Users/joshuamacleod/Desktop/projects/jira/client/src/TotalStoryPointBarChart.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TotalStoryPointBarChart() {\n  _s();\n  const [available, setAvailable] = useState(null);\n  const [awaiting, setAwaiting] = useState(null);\n  const [blocked, setBlocked] = useState(null);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        // Fetch available data\n        const responseAvailable = await fetch(`http://localhost:4000/api/available`);\n        if (!responseAvailable.ok) {\n          throw new Error('Network response for available data was not ok');\n        }\n        const dataAvailable = await responseAvailable.json();\n        setAvailable(dataAvailable);\n\n        // Fetch awaiting data\n        const responseAwaiting = await fetch(`http://localhost:4000/api/awaiting`);\n        if (!responseAwaiting.ok) {\n          throw new Error('Network response for awaiting data was not ok');\n        }\n        const dataAwaiting = await responseAwaiting.json();\n        setAwaiting(dataAwaiting);\n\n        // Fetch blocked data\n        const responseBlocked = await fetch(`http://localhost:4000/api/blocked`);\n        if (!responseBlocked.ok) {\n          throw new Error('Network response for blocked data was not ok');\n        }\n        const dataBlocked = await responseBlocked.json();\n        setBlocked(dataBlocked);\n      } catch (error) {\n        console.error('Error fetching data:', error);\n        setError(error); // Set error state if an error occurs\n      }\n    };\n    fetchData();\n  }, []);\n  console.log('available:', available);\n  console.log('awaiting:', awaiting);\n  console.log('blocked:', blocked);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [error && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Error: \", error.message]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 17\n    }, this), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n}\n_s(TotalStoryPointBarChart, \"SbcEY7IXOkzYJoP64PucC6AXDr0=\");\n_c = TotalStoryPointBarChart;\nexport default TotalStoryPointBarChart;\nvar _c;\n$RefreshReg$(_c, \"TotalStoryPointBarChart\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","TotalStoryPointBarChart","_s","available","setAvailable","awaiting","setAwaiting","blocked","setBlocked","error","setError","fetchData","responseAvailable","fetch","ok","Error","dataAvailable","json","responseAwaiting","dataAwaiting","responseBlocked","dataBlocked","console","log","children","message","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/joshuamacleod/Desktop/projects/jira/client/src/TotalStoryPointBarChart.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nfunction TotalStoryPointBarChart() {\n  const [available, setAvailable] = useState(null);\n  const [awaiting, setAwaiting] = useState(null);\n  const [blocked, setBlocked] = useState(null);\n  const [error, setError] = useState(null); \n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        // Fetch available data\n        const responseAvailable = await fetch(`http://localhost:4000/api/available`);\n        if (!responseAvailable.ok) {\n          throw new Error('Network response for available data was not ok');\n        }\n        const dataAvailable = await responseAvailable.json();\n        setAvailable(dataAvailable); \n\n        // Fetch awaiting data\n        const responseAwaiting = await fetch(`http://localhost:4000/api/awaiting`);\n        if (!responseAwaiting.ok) {\n          throw new Error('Network response for awaiting data was not ok');\n        }\n        const dataAwaiting = await responseAwaiting.json();\n        setAwaiting(dataAwaiting); \n\n        // Fetch blocked data\n        const responseBlocked = await fetch(`http://localhost:4000/api/blocked`);\n        if (!responseBlocked.ok) {\n          throw new Error('Network response for blocked data was not ok');\n        }\n        const dataBlocked = await responseBlocked.json();\n        setBlocked(dataBlocked); \n      } catch (error) {\n        console.error('Error fetching data:', error);\n        setError(error); // Set error state if an error occurs\n      }\n    };\n\n    fetchData(); \n  }, []);\n\n  console.log('available:', available)\n  console.log('awaiting:', awaiting)\n  console.log('blocked:', blocked)\n\n  return (\n    <div>\n      {error && <div>Error: {error.message}</div>} {/* Display error if it exists */}\n      {/* You can render the data here as needed */}\n    </div>\n  );\n}\n\nexport default TotalStoryPointBarChart;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,SAASC,uBAAuBA,CAAA,EAAG;EAAAC,EAAA;EACjC,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAACQ,QAAQ,EAAEC,WAAW,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAC9C,MAAM,CAACU,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACY,KAAK,EAAEC,QAAQ,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EAExCC,SAAS,CAAC,MAAM;IACd,MAAMa,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACF;QACA,MAAMC,iBAAiB,GAAG,MAAMC,KAAK,CAAE,qCAAoC,CAAC;QAC5E,IAAI,CAACD,iBAAiB,CAACE,EAAE,EAAE;UACzB,MAAM,IAAIC,KAAK,CAAC,gDAAgD,CAAC;QACnE;QACA,MAAMC,aAAa,GAAG,MAAMJ,iBAAiB,CAACK,IAAI,CAAC,CAAC;QACpDb,YAAY,CAACY,aAAa,CAAC;;QAE3B;QACA,MAAME,gBAAgB,GAAG,MAAML,KAAK,CAAE,oCAAmC,CAAC;QAC1E,IAAI,CAACK,gBAAgB,CAACJ,EAAE,EAAE;UACxB,MAAM,IAAIC,KAAK,CAAC,+CAA+C,CAAC;QAClE;QACA,MAAMI,YAAY,GAAG,MAAMD,gBAAgB,CAACD,IAAI,CAAC,CAAC;QAClDX,WAAW,CAACa,YAAY,CAAC;;QAEzB;QACA,MAAMC,eAAe,GAAG,MAAMP,KAAK,CAAE,mCAAkC,CAAC;QACxE,IAAI,CAACO,eAAe,CAACN,EAAE,EAAE;UACvB,MAAM,IAAIC,KAAK,CAAC,8CAA8C,CAAC;QACjE;QACA,MAAMM,WAAW,GAAG,MAAMD,eAAe,CAACH,IAAI,CAAC,CAAC;QAChDT,UAAU,CAACa,WAAW,CAAC;MACzB,CAAC,CAAC,OAAOZ,KAAK,EAAE;QACda,OAAO,CAACb,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;QAC5CC,QAAQ,CAACD,KAAK,CAAC,CAAC,CAAC;MACnB;IACF,CAAC;IAEDE,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC;EAENW,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEpB,SAAS,CAAC;EACpCmB,OAAO,CAACC,GAAG,CAAC,WAAW,EAAElB,QAAQ,CAAC;EAClCiB,OAAO,CAACC,GAAG,CAAC,UAAU,EAAEhB,OAAO,CAAC;EAEhC,oBACEP,OAAA;IAAAwB,QAAA,GACGf,KAAK,iBAAIT,OAAA;MAAAwB,QAAA,GAAK,SAAO,EAACf,KAAK,CAACgB,OAAO;IAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,EAAC,GAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAE1C,CAAC;AAEV;AAAC3B,EAAA,CAnDQD,uBAAuB;AAAA6B,EAAA,GAAvB7B,uBAAuB;AAqDhC,eAAeA,uBAAuB;AAAC,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}