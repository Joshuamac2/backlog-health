{"ast":null,"code":"var _jsxFileName = \"/Users/joshuamacleod/Desktop/projects/jira/client/src/TotalStoryPointBarChart.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TotalStoryPointBarChart() {\n  _s();\n  const [data, setData] = useState(null);\n  const [error, setError] = useState(null); // Define error state\n\n  useEffect(() => {\n    const fetchSP = async () => {\n      try {\n        const response = await fetch(`http://localhost:4000/api/`);\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        const spdata = await response.json();\n        setData(spdata);\n      } catch (error) {\n        console.error('Error fetching data:', error);\n        setError(error); // Set error state if an error occurs\n      }\n    };\n    fetchSP();\n  }, []);\n  console.log('State data:', data); // Log the state data\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [error && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Error: \", error.message]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 17\n    }, this), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n}\n_s(TotalStoryPointBarChart, \"XDVXnHzsKW9JpOo48THjIq2+NOI=\");\n_c = TotalStoryPointBarChart;\nexport default TotalStoryPointBarChart;\nvar _c;\n$RefreshReg$(_c, \"TotalStoryPointBarChart\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","TotalStoryPointBarChart","_s","data","setData","error","setError","fetchSP","response","fetch","ok","Error","spdata","json","console","log","children","message","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/joshuamacleod/Desktop/projects/jira/client/src/TotalStoryPointBarChart.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nfunction TotalStoryPointBarChart() {\n  const [data, setData] = useState(null);\n  const [error, setError] = useState(null); // Define error state\n\n  useEffect(() => {\n    const fetchSP = async () => {\n      try {\n        const response = await fetch(`http://localhost:4000/api/`);\n\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n\n        const spdata = await response.json();\n        setData(spdata); \n      } catch (error) {\n        console.error('Error fetching data:', error);\n        setError(error); // Set error state if an error occurs\n      }\n    };\n\n    fetchSP(); \n  }, []);\n\n  console.log('State data:', data); // Log the state data\n\n  return (\n    <div>\n      {error && <div>Error: {error.message}</div>} {/* Display error if it exists */}\n\n    </div>\n  );\n}\n\nexport default TotalStoryPointBarChart;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,SAASC,uBAAuBA,CAAA,EAAG;EAAAC,EAAA;EACjC,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACQ,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;;EAE1CC,SAAS,CAAC,MAAM;IACd,MAAMS,OAAO,GAAG,MAAAA,CAAA,KAAY;MAC1B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,4BAA2B,CAAC;QAE1D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;UAChB,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;QAChD;QAEA,MAAMC,MAAM,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;QACpCT,OAAO,CAACQ,MAAM,CAAC;MACjB,CAAC,CAAC,OAAOP,KAAK,EAAE;QACdS,OAAO,CAACT,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;QAC5CC,QAAQ,CAACD,KAAK,CAAC,CAAC,CAAC;MACnB;IACF,CAAC;IAEDE,OAAO,CAAC,CAAC;EACX,CAAC,EAAE,EAAE,CAAC;EAENO,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEZ,IAAI,CAAC,CAAC,CAAC;;EAElC,oBACEH,OAAA;IAAAgB,QAAA,GACGX,KAAK,iBAAIL,OAAA;MAAAgB,QAAA,GAAK,SAAO,EAACX,KAAK,CAACY,OAAO;IAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,EAAC,GAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAE1C,CAAC;AAEV;AAACnB,EAAA,CAhCQD,uBAAuB;AAAAqB,EAAA,GAAvBrB,uBAAuB;AAkChC,eAAeA,uBAAuB;AAAC,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}